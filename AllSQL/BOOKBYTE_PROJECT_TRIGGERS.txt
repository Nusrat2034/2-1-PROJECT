--DECREASE_STOCK_AFTER_ORDER Trigger
CREATE OR REPLACE TRIGGER DECREASE_STOCK_AFTER_ORDER
AFTER INSERT 
ON ORDERED_ITEMS
FOR EACH ROW
DECLARE
BEGIN
  UPDATE BOOKS
  SET STOCK = STOCK - :NEW.BOOK_COUNT,
	    STATUS = CASE 
                 WHEN STOCK - :NEW.BOOK_COUNT <= 0 THEN 'Not Available' 
                 ELSE STATUS 
               END
  WHERE ISBN = :NEW.ISBN;
END;





--DELETE_IN_CART_ITEMS_AFTER_ORDERED_ITEMS_INSERT Trigger
CREATE OR REPLACE TRIGGER DELETE_IN_CART_ITEMS_AFTER_ORDERED_ITEMS_INSERT
AFTER INSERT 
ON ORDERED_ITEMS
FOR EACH ROW
DECLARE
  v_user_id NUMBER;
  v_cart_id NUMBER;
BEGIN
  SELECT user_id INTO v_user_id FROM ORDERS WHERE ORDER_ID = :NEW.ORDER_ID;

  SELECT CART_ID INTO v_cart_id FROM CART WHERE user_id = v_user_id;
  
  DELETE FROM IN_CART_ITEMS WHERE CART_ID = v_cart_id AND ISBN = :NEW.ISBN; 
END;





--BEFORE_BOOKS_INSERT_OR_UPDATE Trigger
CREATE OR REPLACE TRIGGER BEFORE_BOOKS_INSERT_OR_UPDATE
BEFORE INSERT OR UPDATE
ON BOOKS
FOR EACH ROW
BEGIN
  IF :NEW.STOCK < 0 THEN
    :NEW.STOCK := 0;
    :NEW.STATUS := 'Not Available';
  ELSIF :NEW.STOCK = 0 THEN
    :NEW.STATUS := 'Not Available';
  ELSE
    :NEW.STATUS := 'Available';
  END IF;
	
  :NEW.TITLE := INITCAP(:NEW.TITLE);
	
  IF :NEW.DISCOUNT < 0 THEN
    :NEW.DISCOUNT := 0;
  END IF;
END;





--BEFORE_INSERT_PUBLISHER Trigger
CREATE OR REPLACE TRIGGER BEFORE_INSERT_PUBLISHER
BEFORE INSERT OR UPDATE
ON PUBLISHER
FOR EACH ROW
BEGIN
  :NEW.NAME := INITCAP(:NEW.NAME);
END;





--BEFORE_INSERT_AUTHOR Trigger
CREATE OR REPLACE TRIGGER BEFORE_INSERT_AUTHOR
BEFORE INSERT OR UPDATE
ON AUTHOR
FOR EACH ROW
BEGIN
  :NEW.AUTHOR_NAME := INITCAP(:NEW.AUTHOR_NAME);
END;





--BEFORE_INSERT_CATEGORY Trigger
CREATE OR REPLACE TRIGGER BEFORE_INSERT_CATEGORY
BEFORE INSERT OR UPDATE
ON CATEGORY
FOR EACH ROW
BEGIN
  :NEW.CATEGORY_NAME := INITCAP(:NEW.CATEGORY_NAME);
END;





--BACKUP_BOOKS_DELETED Trigger
CREATE OR REPLACE TRIGGER BACKUP_BOOKS_DELETED
BEFORE DELETE
ON BOOKS
FOR EACH ROW
BEGIN
  INSERT INTO BOOKS_DELETED (
    ISBN, 
    TITLE, 
    EDITION, 
    PUBLISHER_ID, 
    PUBLICATION_DATE, 
    PRICE, 
    STATUS, 
    STOCK, 
    DISCOUNT, 
    DELETED_BY_USER, 
    DELETION_DATE
  ) VALUES (
    :OLD.ISBN, 
    :OLD.TITLE, 
    :OLD.EDITION, 
    :OLD.PUBLISHER_ID, 
    :OLD.PUBLICATION_DATE, 
    :OLD.PRICE, 
    :OLD.STATUS, 
    :OLD.STOCK, 
    :OLD.DISCOUNT, 
    USER, 
    SYSDATE
  );
END;





--BACKUP_DELETED_USERS Trigger
CREATE OR REPLACE TRIGGER BACKUP_DELETED_USERS
BEFORE DELETE
ON users
FOR EACH ROW
BEGIN
  INSERT INTO USERS_DELETED (
    user_id, 
    f_name, 
    l_name, 
    email, 
    password, 
    date_of_birth, 
    street, 
    city, 
    country, 
    DELETED_BY_USER, 
    DELETION_DATE
  ) VALUES (
    :OLD.user_id, 
    :OLD.f_name, 
    :OLD.l_name, 
    :OLD.email, 
    :OLD.password, 
    :OLD.date_of_birth, 
    :OLD.street, 
    :OLD.city, 
    :OLD.country, 
    USER, 
    SYSDATE
  );
END;

